TODO notepad
============
- rework activation record implementation (in runtime)
- implement explicit & modularized calling conventions
- implement continuations (see below for details)
- make evaluation of parameters to a function call more dynamic (so we can implement lazy evaluation)
- implement garbage collector

- use "&rest args" instead of "args" in several places
- implement return value for main function
- implement auto-names for anonymous functions
- remove layer of TARGET-... functions in llvm.lisp? should be the same as functions in runtime.lisp?
- implement debugging functionality for llvm abstraction layer (dump values & types etc.)
- get rid of global_frame functions
- implement toolchain for linking etc. within lisp via c-api?
- implement true/false for lisp values in llvm logic (icmp etc.)
- build docker image for owlisp
- make it a lisp2
- use globals dynamically scoped for real (i.e. use let instead of setf)



IMPLEMENTING ACTIVATION RECORDS
===============================
- allocate on heap => more flexible


IMPLEMENTING CONTINUATIONS
==========================
- implement continuations stackless


IMPLEMENTING GARBAGE COLLECTOR
==============================


OLD
===
- fix toplevel to work correctly in toplevel when evaluating multiple expressions after another
  e.g. evaluating (if 1 2 3) does not work twice in the same toplevel

OLD (2014-07-06)
================
- generate owlisp for llvm at build time
- define special prototype for main function

OLD (2014-07-05)
================
- fix constants
- implement llvm value/type container that can handle both lisp & llvm values and treat corresponding values transparently as equal
- reset state (declarations & definitions) for subsequent invocations of toplevel

OLD (2014-07-04)
================
- remove secd code generation (not necessary for llvm-ir generation)
- insert pass to generate cfgraph - most probably _before_ analyze-pass?
- work out how to generate "merge" basic block after if-clause

- secd generation for if is not correct (missing RET opcode in the end of then- & else-clauses?)
  => expressions after "if" (in a sequence) don't get evaluated

