;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.2
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.

(in-package :owlisp/runtime)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant __RUNTIME_H 1)

(cl:defconstant __ERROR_H 1)

(cffi:defcfun ("fatal_error" fatal_error) :void
  (message :string))

(cffi:defcfun ("warning_error" warning_error) :void
  (message :string))

(cl:defconstant __TYPES_H 1)

(cl:defconstant TYPE_INT #x01)

(cl:defconstant TYPE_FLOAT #x02)

(cl:defconstant TYPE_STRING #x03)

(cl:defconstant TYPE_CONS #x04)

(cl:defconstant TYPE_PATH #x05)

(cl:defconstant TYPE_ARRAY #x06)

(cffi:defcstruct value_t
	(type :unsigned-char)
	(value :int))

(cffi:defcfun ("new_value_int" new_value_int) :pointer
  (val :int))

(cffi:defcfun ("free_value" free_value) :void
  (value :pointer))

(cffi:defcfun ("values_equal" values_equal) :unsigned-char
  (value1 :pointer)
  (value2 :pointer))

(cffi:defcfun ("dump_value" dump_value) :void
  (value :pointer))

(cl:defconstant __FRAME_H 1)

(cl:defconstant MAX_FRAME_VALUES 16)

(cffi:defcstruct frame_t
	(parent :pointer)
	(values :pointer))

(cffi:defcfun ("new_frame" new_frame) :pointer
  (parent :pointer))

(cffi:defcfun ("free_frame" free_frame) :pointer
  (f :pointer))

(cffi:defcfun ("set_binding" set_binding) :void
  (f :pointer)
  (frameindex :int)
  (varindex :int)
  (value :pointer))

(cffi:defcfun ("get_binding" get_binding) :pointer
  (f :pointer)
  (frameindex :int)
  (varindex :int))

(cffi:defcfun ("dump_frame" dump_frame) :void
  (f :pointer))


